"0",""
"0","# Baskets"
"0","ai_tickers     <- c(""MSFT"", ""GOOG"", ""NVDA"", ""AMD"", ""SMCI"", ""AI"", ""PLTR"")"
"0","dotcom_tickers <- c(""MSFT"", ""INTC"", ""CSCO"", ""ORCL"", ""QCOM"", ""EBAY"", ""AMZN"")"
"0",""
"0","# defining start and end dates per era "
"0","ai_start     <- as.Date(""2020-01-01"")"
"0","ai_end       <- analysis_asof"
"0","dotcom_start <- as.Date(""1997-01-01"")"
"0","dotcom_end   <- as.Date(""2002-12-31"")"
"0",""
"0","all_tickers <- unique(c(ai_tickers, dotcom_tickers))"
"0","suppressWarnings("
"0","  getSymbols(all_tickers, from = dotcom_start, to = ai_end, auto.assign = TRUE, src = ""yahoo"")"
"0",")"
"1"," [1]"
"1"," ""MSFT"""
"1"," ""GOOG"""
"1"," ""NVDA"""
"1"," ""AMD"" "
"1"," ""SMCI"""
"1"," ""AI""  "
"1"," ""PLTR"""
"1"," ""INTC"""
"1"," ""CSCO"""
"1"," ""ORCL"""
"1"," ""QCOM"""
"1"," ""EBAY"""
"1"," ""AMZN"""
"1","
"
"0","# Helper function:"
"0","# For each stock ticker, this function extracts only the price history that falls"
"0","# within the specific era we're analyzing."
"0","# If a ticker doesn’t have data for that time window (e.g., it wasn’t listed yet),"
"0","# the function safely returns NULL instead of an error."
"0","# This way, the rest of the pipeline keeps running smoothly even if some tickers have gaps."
"0",""
"0",""
"0","slice_era <- function(sym, start_date, end_date) {"
"0","  x <- get(sym, envir = .GlobalEnv)"
"0","  tryCatch(window(x, start = start_date, end = end_date),"
"0","           error = function(e) NULL)"
"0","}"
"0",""
"0","# Create two lists of time series (xts objects), one for each era."
"0","# - ai_list holds the AI basket sliced to 2020–present."
"0","# - dotcom_list holds the Dot-com basket sliced to 1997–2002."
"0",""
"0","ai_list     <- setNames(lapply(ai_tickers,     slice_era, start_date = ai_start,    end_date = ai_end),       ai_tickers)"
"0","dotcom_list <- setNames(lapply(dotcom_tickers, slice_era, start_date = dotcom_start, end_date = dotcom_end), dotcom_tickers)"
